{"version":3,"sources":["logic/gameboard.js","styled-components/styled-grid-content.js","styled-components/styled-hit.js","styled-components/styled-miss.js","components/BoardHitsMisses.js","styled-components/styled-gameboard.js","styled-components/styled-grid-cell.js","vec2.js","components/Gameboard.js","components/RenderShip.js","components/RenderShips.js","components/AttackableBoard.js","logic/ship.js","logic/playerAi.js","styled-components/styled-gameboards-container.js","components/MainGame.js","components/RenderShipPreview.js","components/GameSetup.js","components/Instructions.js","components/App.js","index.js"],"names":["gameboardCaller","length","gameboard","size","ships","misses","isOutOfBounds","pos","x","y","posContainsShip","some","ship","getBoardSpaceCoords","v","equals","isMissPos","miss","isHitPos","hits","hitPos","getHits","reduce","acc","isValidShip","every","isValidMovePos","addShip","Error","map","coord","addShips","newShips","newBoard","receiveHit","hitShip","find","position","hitSegment","findIndex","newShip","hit","newMisses","isEveryShipSunk","isSunk","StyledGridContent","styled","div","StyledHit","StyledMiss","BoardHitsMisses","getKey","StyledBoard","StyledGridCell","props","vec2","isVec2","Object","freeze","add","multiply","cardinalDirections","up","right","down","left","indexedDirections","direction","indexed","increment","dir","incrementQuantity","iDir","Gameboard","onCellClick","onCellMouseEnter","children","rows","i","j","push","onClick","onMouseEnter","className","split","renderBoard","RenderShip","customStyle","background","border","style","xStart","rotation","origin","Math","max","yStart","getSpan","min","xSpan","ySpan","gridColumn","gridRow","getGridPosition","pointerEvents","userSelect","RenderShips","AttackableBoard","gb","setGb","setGameboard","onAttack","prevBoard","filter","localHits","Array","fill","getBoardSpaceCoord","segmentIndex","boardSpaceCoords","newHits","includes","getValidPos","board","floor","random","getSmartPos","targetShip","validAdjacentPositions","possiblePositions","getValidShip","shipLength","possibleShip","console","log","getShips","startingBoard","shipLengths","StyledBoardContainer","MainGame","useBoardPlayer","useBoardNpc","onGameOver","playerBoard","setPlayerBoard","npcBoard","setNpcBoard","useState","turn","setTurn","useEffect","getSunkCount","gameBoard","textAlign","prev","RenderShipPreview","isValidPos","opacity","backgroundColor","GameSetup","useBoard","onAllShipsPlaced","shipIndex","setShipIndex","currentShip","setCurrentShip","setBoard","setShipPos","_ship","incrementShipRotation","onWheel","e","deltaY","prevShip","mostCurrentShip","prevIndex","Instructions","onContinue","GAME_MODES","App","ai","mode","gameScene","setGameScene","winner","renderGameOver","initializeGame","padding","display","flexDirection","alignItems","justifyContent","selectRenderMode","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f29f503c.chunk.js","sourcesContent":["// I want to make the full constructor private\nexport default function gameboardCaller(length) {\n  return gameboard(length);\n}\n\nfunction gameboard(size, ships = [], misses = []) {\n  const isOutOfBounds = (pos) =>\n    pos.x < 0 || pos.x > size - 1 || pos.y < 0 || pos.y > size - 1;\n\n  const posContainsShip = (pos) =>\n    ships.some((ship) => ship.getBoardSpaceCoords().some((v) => v.equals(pos)));\n\n  const isMissPos = (pos) => misses.some((miss) => miss.equals(pos));\n\n  const isHitPos = (pos) =>\n    ships.some((ship) => ship.hits.some((hitPos) => hitPos.equals(pos)));\n\n  const getHits = () => ships.reduce((acc, ship) => [...acc, ...ship.hits], []);\n\n  const isValidShip = (ship) =>\n    ship\n      .getBoardSpaceCoords()\n      .every((pos) => !isOutOfBounds(pos) && !posContainsShip(pos));\n\n  const isValidMovePos = (pos) => {\n    return !isOutOfBounds(pos) && !isMissPos(pos) && !isHitPos(pos);\n  };\n\n  const addShip = (ship) => {\n    if (!isValidShip(ship)) {\n      throw new Error(\n        `Tried to add ship at illegal board position ${ship\n          .getBoardSpaceCoords()\n          .map((coord) => `(${coord.x},${coord.y})`)}`\n      );\n    }\n\n    return gameboard(size, [...ships, ship], misses);\n  };\n\n  const addShips = (newShips) => {\n    return newShips.reduce(\n      (newBoard, ship) => newBoard.addShip(ship),\n      gameboard(size, ships, misses)\n    );\n  };\n\n  const receiveHit = (hitPos) => {\n    if (isOutOfBounds(hitPos)) {\n      throw new Error(\n        `Tried to receive hit at illegal position (${hitPos.x}, ${hitPos.y})`\n      );\n    }\n\n    // try to find a ship at that position\n    const hitShip = ships.find((ship) =>\n      ship.getBoardSpaceCoords().some((position) => position.equals(hitPos))\n    );\n\n    if (hitShip) {\n      // Find which segment of the ship was hit by matching board-space coords\n      // TODO: this should probably be handled by ship...\n      const hitSegment = hitShip\n        .getBoardSpaceCoords()\n        .findIndex((pos) => pos.equals(hitPos));\n\n      // remove hitship from ships and replace with newship\n      const newShip = hitShip.hit(hitSegment);\n      const newShips = ships.map((ship) => (ship === hitShip ? newShip : ship));\n\n      return gameboard(size, newShips, misses);\n    } else {\n      const newMisses = [...misses, hitPos];\n      return gameboard(size, ships, newMisses);\n    }\n  };\n\n  const isEveryShipSunk = () => ships.every((ship) => ship.isSunk());\n\n  return {\n    size,\n    ships,\n    misses,\n    get hits() {\n      return getHits();\n    },\n    addShip,\n    addShips,\n    receiveHit,\n    isEveryShipSunk,\n    isValidShip,\n    isValidMovePos,\n  };\n}\n","import styled from \"styled-components\";\n\nconst StyledGridContent = styled.div`\n  grid-column: ${({ pos }) => pos.x + 1};\n  grid-row: ${({ pos }) => pos.y + 1};\n`;\n\nexport default StyledGridContent;\n","import styled from \"styled-components\";\nimport StyledGridContent from \"./styled-grid-content\";\n\nconst StyledHit = styled(StyledGridContent)`\n  background-color: green;\n  border-radius: 50%;\n  opacity: 50%;\n`;\n\nexport default StyledHit;\n","import styled from \"styled-components\";\nimport StyledGridContent from \"./styled-grid-content\";\n\nconst StyledMiss = styled(StyledGridContent)`\n  background-color: red;\n  border-radius: 50%;\n  opacity: 50%;\n`;\n\nexport default StyledMiss;\n","import StyledHit from \"../styled-components/styled-hit\";\nimport StyledMiss from \"../styled-components/styled-miss\";\n\nexport default function BoardHitsMisses({ hits, misses }) {\n  const getKey = (pos) => `(${pos.x}, ${pos.y})`;\n  return (\n    <>\n      {hits.map((hit) => (\n        <StyledHit pos={hit} key={getKey(hit)} />\n      ))}\n      {misses.map((miss) => (\n        <StyledMiss pos={miss} key={getKey(miss)} />\n      ))}\n    </>\n  );\n}\n","import styled from \"styled-components\";\n\nconst StyledBoard = styled.div`\n  /* TODO: query screen width to set cell size */\n  --container-size: 20rem;\n  --cell-size: ${({ size }) => `calc(var(--container-size)/${size})`};\n\n  /* box-sizing: border-box; */\n  display: grid;\n  grid-template-columns: repeat(${({ size }) => size}, var(--cell-size));\n  grid-template-rows: repeat(${({ size }) => size}, var(--cell-size));\n\n  max-width: var(--container-size);\n\n  border: 1px solid black;\n\n  > .grid-bg {\n    border: 1px solid black;\n    text-align: center;\n    cursor: pointer;\n  }\n`;\n\nexport default StyledBoard;\n","import styled from \"styled-components\";\n\nconst StyledGridCell = styled.div`\n  user-select: none;\n  grid-column: ${(props) => props.position.x + 1};\n  grid-row: ${(props) => props.position.y + 1};\n\n  :hover {\n    background: lightgrey;\n  }\n`;\n\nexport default StyledGridCell;\n","// I need to double-freeze, or else you could still assign dir.up[0]\nconst vec2 = (x, y) => {\n  const equals = (v) => v.x === x && v.y === y;\n\n  const isVec2 = (v) => v.x != null && v.y != null;\n\n  const add = (v) => (isVec2(v) ? vec2(x + v.x, y + v.y) : vec2(x + v, y + v));\n\n  const multiply = (v) =>\n    isVec2(v) ? vec2(x * v.x, y * v.y) : vec2(x * v, y * v);\n\n  return Object.freeze({\n    x,\n    y,\n    equals,\n    add,\n    multiply,\n  });\n};\n\nconst cardinalDirections = Object.freeze({\n  up: vec2(0, -1),\n  right: vec2(1, 0),\n  down: vec2(0, 1),\n  left: vec2(-1, 0),\n});\n\nconst indexedDirections = [\n  cardinalDirections.up,\n  cardinalDirections.right,\n  cardinalDirections.down,\n  cardinalDirections.left,\n];\n\nexport const direction = Object.freeze({\n  ...cardinalDirections,\n  indexed: indexedDirections,\n  increment: (dir, incrementQuantity) =>\n    indexedDirections[\n      (indexedDirections.findIndex((iDir) => iDir.equals(dir)) +\n        incrementQuantity) %\n        indexedDirections.length\n    ],\n});\n\nexport default vec2;\n","import React from \"react\";\nimport StyledBoard from \"../styled-components/styled-gameboard\";\nimport StyledGridCell from \"../styled-components/styled-grid-cell\";\nimport vec2 from \"../vec2\";\n\nexport default function Gameboard({\n  onCellClick = () => {},\n  onCellMouseEnter = () => {},\n  gameboard,\n  children,\n}) {\n  const renderBoard = () => {\n    const rows = [];\n    for (let i = 0; i < gameboard.size; i++) {\n      for (let j = 0; j < gameboard.size; j++) {\n        const pos = vec2(j, i);\n\n        rows.push(\n          <StyledGridCell\n            key={j + i * gameboard.size}\n            onClick={() => onCellClick(pos)}\n            onMouseEnter={() => onCellMouseEnter(pos)}\n            className=\"grid-bg\"\n            position={pos}\n          >\n            {\"ABCDEFGHIJKLMNOP\".split(\"\")[i]}\n            {j + 1}\n          </StyledGridCell>\n        );\n      }\n    }\n    return rows;\n  };\n\n  return (\n    <StyledBoard size={gameboard.size}>\n      {renderBoard()}\n      {children}\n    </StyledBoard>\n  );\n}\n","import React from \"react\";\n\n// render a ship as a child of the Gameboard component\n// looks at ship length to determine graphic (?)\n// looks at ship pos & rotation to determine how to render\n// uses css grid grid-column & grid-row to set position on screen\nexport default function RenderShip({\n  ship,\n  customStyle = { background: \"grey\", border: \"1px solid black\" },\n}) {\n  // for now, there are no graphics\n  // default bg is grey\n  const getGridPosition = () => {\n    const xStart =\n      ship.rotation.x >= 0\n        ? ship.origin.x + 1\n        : Math.max(1, ship.origin.x - ship.length + 2);\n    const yStart =\n      ship.rotation.y >= 0\n        ? ship.origin.y + 1\n        : Math.max(1, ship.origin.y - ship.length + 2);\n\n    // I'm so, so sorry for what I'm about to do\n    // prettier-ignore\n    const getSpan = (rotation, origin) =>\n      rotation === 0\n        ? 1 // if 0, span 1\n        : rotation > 0\n          ? ship.length // else, if > 0, span = length\n          : Math.min(origin + 1, ship.length); // BUT if < 0, min is origin\n\n    const xSpan = getSpan(ship.rotation.x, ship.origin.x);\n    const ySpan = getSpan(ship.rotation.y, ship.origin.y);\n\n    return {\n      gridColumn: `${xStart} / span ${xSpan}`,\n      gridRow: `${yStart} / span ${ySpan}`,\n    };\n  };\n\n  const sunkStyle = () => (ship.isSunk() ? { background: \"red\" } : {});\n\n  return (\n    <>\n      <div\n        style={{\n          ...customStyle,\n          ...sunkStyle(),\n          ...getGridPosition(),\n          pointerEvents: \"none\",\n        }}\n      ></div>\n      <div\n        style={{\n          gridColumn: ship.origin.x + 1,\n          gridRow: ship.origin.y + 1,\n          pointerEvents: \"none\",\n          userSelect: \"none\",\n        }}\n      >\n        X\n      </div>\n    </>\n  );\n}\n","import RenderShip from \"./RenderShip\";\n\nexport default function RenderShips({ ships }) {\n  return (\n    <>\n      {ships.map((ship) => (\n        <RenderShip ship={ship} key={`(${ship.origin.x}, ${ship.origin.y})`} />\n      ))}\n    </>\n  );\n}\n","import React from \"react\";\nimport BoardHitsMisses from \"./BoardHitsMisses\";\nimport Gameboard from \"./Gameboard\";\nimport RenderShips from \"./RenderShips\";\n\nexport default function AttackableBoard({\n  gameboard: gb,\n  setGameboard: setGb,\n  onAttack,\n}) {\n  const handleAttack = (pos) => {\n    if (!gb.isValidMovePos(pos)) {\n      return;\n    }\n\n    setGb((prevBoard) => prevBoard.receiveHit(pos));\n    onAttack();\n  };\n\n  return (\n    <div>\n      <Gameboard gameboard={gb} onCellClick={handleAttack}>\n        <BoardHitsMisses misses={gb.misses} hits={gb.hits} />\n        <RenderShips ships={gb.ships.filter((ship) => ship.isSunk())} />\n      </Gameboard>\n    </div>\n  );\n}\n","export default function ship(\n  length,\n  origin,\n  rotation,\n  localHits = Array(length).fill(false)\n) {\n  const getHits = () =>\n    localHits.reduce(\n      (acc, hit, i) => (hit ? [...acc, getBoardSpaceCoord(i)] : acc),\n      []\n    );\n\n  const getBoardSpaceCoord = (segmentIndex) =>\n    rotation.multiply(segmentIndex).add(origin);\n\n  const getBoardSpaceCoords = () => {\n    const boardSpaceCoords = [];\n    for (let i = 0; i < length; i++) {\n      boardSpaceCoords.push(getBoardSpaceCoord(i));\n    }\n    return boardSpaceCoords;\n  };\n\n  const hit = (hitPos) => {\n    if (hitPos > length - 1 || hitPos < 0) {\n      throw new Error(`Tried to hit a ship at illegal position ${hitPos}`);\n    }\n    const newHits = [...localHits];\n    newHits[hitPos] = true;\n    return ship(length, origin, rotation, newHits);\n  };\n\n  const isSunk = () => !localHits.includes(false);\n\n  return {\n    length,\n    origin,\n    rotation,\n    get hits() {\n      return getHits();\n    },\n    hit,\n    isSunk,\n    getBoardSpaceCoords,\n  };\n}\n","import vec2, { direction as dir } from \"../vec2\";\nimport ship from \"./ship\";\n\n// get a random position that passes the validator function\nconst getValidPos = (board) => {\n  let pos;\n  do {\n    pos = vec2(\n      Math.floor(Math.random() * board.size),\n      Math.floor(Math.random() * board.size)\n    );\n  } while (!board.isValidMovePos(pos));\n\n  return pos;\n};\n\nconst getAdjacentPositions = (pos) => dir.indexed.map((dir) => pos.add(dir));\n\n// This AI \"cheats\":\n// In a true game, it can be ambiguous if a hit belongs to a sunk or unsunk ship\n// The tradeoff is this AI is otherwise still very dumb.\n// Note: one minor (?) failing here is if two ships are placed next to each other,\n// it might produce one hit on each ship, and will not necessarily follow that line\nconst getSmartPos = (board) => {\n  // See if there's a ship that has been hit but not sunk\n  const targetShip = board.ships.find(\n    (ship) => ship.hits.length > 0 && !ship.isSunk()\n  );\n\n  // Just get a random position if that fails\n  if (!targetShip) {\n    return getValidPos(board);\n  }\n\n  // if there's only one hit, check all cardinal directions for a valid hit pos\n  // and pick randomly from them\n  if (targetShip.hits.length === 1) {\n    const validAdjacentPositions = getAdjacentPositions(\n      targetShip.hits[0]\n    ).filter(board.isValidMovePos);\n\n    // Length should never be 0, but just in case...\n    if (validAdjacentPositions.length > 0) {\n      return validAdjacentPositions[\n        Math.floor(Math.random() * validAdjacentPositions.length)\n      ];\n    }\n  } else if (targetShip.hits.length > 1) {\n    // if there are multiple hits, choose randomly on either extent of the hit\n    const possiblePositions = [\n      targetShip.hits[0].add(targetShip.rotation.multiply(vec2(-1, -1))),\n      targetShip.hits[targetShip.hits.length - 1].add(targetShip.rotation),\n    ].filter(board.isValidMovePos);\n\n    if (possiblePositions.length > 0) {\n      return possiblePositions[\n        Math.floor(Math.random() * possiblePositions.length)\n      ];\n    }\n  }\n\n  //! The above logic might fail if hits aren't adjacent?\n  // If that happens, test if previous two positions are valid, & if not,\n  // then look for valid spaces in between them & choose randomly\n\n  return getValidPos(board);\n};\n\n// Naive ship placement algorithm\n// Randomly generates origin & rotation vectors until it finds a valid position\n// TODO: shouldn't reattempt failed positions\nconst getValidShip = (board, shipLength) => {\n  if (board.size < shipLength) {\n    throw new Error(\n      `Cannot get valid ship of length ${shipLength} from board of length ${board.size}`\n    );\n  }\n\n  let possibleShip;\n  let i = 0;\n  const MAX_ITERATIONS = 999;\n  do {\n    possibleShip = ship(\n      shipLength,\n      getValidPos(board),\n      dir.indexed[Math.floor(Math.random() * dir.indexed.length)]\n    );\n    i++;\n  } while (!board.isValidShip(possibleShip) && i < MAX_ITERATIONS);\n\n  if (i >= MAX_ITERATIONS) {\n    console.log(\n      \"Could not find valid position to place ship! There are likely not enough free positions on the board\"\n    );\n    return;\n  }\n\n  return possibleShip;\n};\n\n// TODO: should be able to backtrack, so it can't lock itself into a state\n// where it can't place all the ships that should be theoretically placeable\nconst getShips = (startingBoard) => {\n  let board = startingBoard;\n  const shipLengths = [5, 4, 3, 3, 2];\n  const ships = [];\n  for (let i = 0; i < shipLengths.length; i++) {\n    const newShip = getValidShip(board, shipLengths[i]);\n    ships.push(newShip);\n    board = board.addShip(newShip);\n  }\n\n  return ships;\n};\n\nexport { getValidPos, getSmartPos, getValidShip, getShips };\n","import styled from \"styled-components\";\n\nconst StyledBoardContainer = styled.div`\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  @media (min-width: 48rem) {\n    width: 48em;\n    display: flex;\n    flex-direction: row;\n    justify-content: space-around;\n  }\n`;\n\nexport default StyledBoardContainer;\n","import { useState, useEffect } from \"react\";\nimport EnemyBoard from \"./AttackableBoard\";\nimport Gameboard from \"./Gameboard\";\nimport { getSmartPos } from \"../logic/playerAi\";\nimport BoardHitsMisses from \"./BoardHitsMisses\";\nimport RenderShips from \"./RenderShips\";\nimport StyledBoardContainer from \"../styled-components/styled-gameboards-container\";\n\nfunction MainGame({ useBoardPlayer, useBoardNpc, onGameOver }) {\n  const [playerBoard, setPlayerBoard] = useBoardPlayer;\n  const [npcBoard, setNpcBoard] = useBoardNpc;\n  const [turn, setTurn] = useState(0);\n\n  // I can't check isEveryShipSunk until testBoard is updated\n  // and I'm not sure yet how to properly handle that in my incrementTurn cb\n  useEffect(() => {\n    if (npcBoard.isEveryShipSunk()) {\n      onGameOver(\"Player\");\n    } else if (playerBoard.isEveryShipSunk()) {\n      onGameOver(\"NPC\");\n    }\n  }, [playerBoard, npcBoard, onGameOver]);\n\n  const npcTurn = () => {\n    setPlayerBoard((prev) => prev.receiveHit(getSmartPos(prev)));\n  };\n\n  const incrementTurn = () => {\n    npcTurn();\n    setTurn((prev) => prev + 1);\n  };\n\n  const getSunkCount = (gameBoard) =>\n    gameBoard.ships.reduce(\n      (acc, ship) => (ship.isSunk() ? acc - 1 : acc),\n      gameBoard.ships.length\n    );\n\n  return (\n    <div style={{ textAlign: \"center\" }}>\n      <div>Turn: {turn}</div>\n      <StyledBoardContainer>\n        <div>\n          <h2>Enemy board</h2>\n          <EnemyBoard\n            gameboard={npcBoard}\n            setGameboard={setNpcBoard}\n            onAttack={incrementTurn}\n          />\n          <p>Enemy ships remaining: {getSunkCount(npcBoard)}</p>\n        </div>\n        <div>\n          <h2>Player board</h2>\n          <Gameboard gameboard={playerBoard}>\n            <BoardHitsMisses\n              hits={playerBoard.hits}\n              misses={playerBoard.misses}\n            />\n            <RenderShips ships={playerBoard.ships} />\n          </Gameboard>\n          <p>Player ships remaining: {getSunkCount(playerBoard)}</p>\n        </div>\n      </StyledBoardContainer>\n    </div>\n  );\n}\n\nexport default MainGame;\n","import RenderShip from \"./RenderShip\";\n\nexport default function RenderShipPreview({ ship, isValidPos }) {\n  return (\n    <RenderShip\n      ship={ship}\n      customStyle={{\n        opacity: \"50%\",\n        backgroundColor: isValidPos ? \"green\" : \"red\",\n      }}\n    />\n  );\n}\n","import { useState } from \"react\";\nimport ship from \"../logic/ship\";\nimport Gameboard from \"./Gameboard\";\nimport RenderShips from \"./RenderShips\";\nimport RenderShipPreview from \"./RenderShipPreview\";\nimport vec2, { direction } from \"../vec2\";\n\nexport default function GameSetup({ useBoard, onAllShipsPlaced }) {\n  const shipLengths = [5, 4, 3, 3, 2];\n  const [shipIndex, setShipIndex] = useState(0);\n  const [currentShip, setCurrentShip] = useState(\n    ship(shipLengths[shipIndex], vec2(-10, -10), direction.right)\n  );\n\n  const [board, setBoard] = useBoard;\n\n  const setShipPos = (_ship, pos) => ship(_ship.length, pos, _ship.rotation);\n\n  const incrementShipRotation = (_ship, incrementQuantity = 1) =>\n    ship(\n      _ship.length,\n      _ship.origin,\n      direction.increment(_ship.rotation, incrementQuantity)\n    );\n\n  const isValidPos = (_ship) => useBoard[0].isValidShip(_ship);\n\n  const setCurrentShipPos = (pos) => {\n    setCurrentShip((prevShip) => setShipPos(prevShip, pos));\n  };\n\n  const placeShip = (pos) => {\n    const mostCurrentShip = setShipPos(currentShip, pos);\n\n    if (!isValidPos(mostCurrentShip)) {\n      console.log(\"Oops! Can't place ship there!\");\n      return;\n    }\n\n    setBoard((prevBoard) => prevBoard.addShip(mostCurrentShip));\n\n    if (shipIndex < shipLengths.length - 1) {\n      // Set the next \"preview\" ship to:\n      // next length in array, current pos, & rotation of previous ship\n      setCurrentShip(\n        ship(shipLengths[shipIndex + 1], pos, mostCurrentShip.rotation)\n      );\n      setShipIndex((prevIndex) => prevIndex + 1);\n    } else {\n      onAllShipsPlaced();\n    }\n  };\n\n  return (\n    <div>\n      <h2>Place your ships!</h2>\n      <div\n        onWheel={(e) =>\n          e.deltaY > 0\n            ? setCurrentShip((prevShip) => incrementShipRotation(prevShip))\n            : setCurrentShip((prevShip) => incrementShipRotation(prevShip, 3))\n        }\n      >\n        <Gameboard\n          gameboard={board}\n          onCellMouseEnter={setCurrentShipPos}\n          onCellClick={placeShip}\n        >\n          <RenderShipPreview\n            ship={currentShip}\n            isValidPos={isValidPos(currentShip)}\n          />\n          <RenderShips ships={board.ships} />\n        </Gameboard>\n      </div>\n      <button\n        onClick={() =>\n          setCurrentShip((prevShip) => incrementShipRotation(prevShip))\n        }\n      >\n        Rotate\n      </button>\n      <p>Rotate with scroll wheel</p>\n    </div>\n  );\n}\n","export default function Instructions({ onContinue }) {\n  return (\n    <div>\n      <h2>How to play</h2>\n      <p>Battleship is a strategic guessing game.</p>\n      <p>\n        Try to figure out where the enemy ships are hiding, and sink their fleet\n        before they can sink yours!\n      </p>\n      <button onClick={onContinue}>Continue</button>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport gameboard from \"../logic/gameboard\";\nimport MainGame from \"./MainGame\";\nimport * as ai from \"../logic/playerAi\";\nimport GameSetup from \"./GameSetup\";\nimport Instructions from \"./Instructions\";\n\nconst GAME_MODES = {\n  rules: \"rules\",\n  setup: \"setup\",\n  main: \"main\",\n  gameOver: \"game over\",\n};\n\nexport default function App() {\n  const useBoardPlayer = useState(() => gameboard(10));\n\n  const useBoardNpc = useState(() =>\n    gameboard(10).addShips(ai.getShips(gameboard(10)))\n  );\n\n  const [gameScene, setGameScene] = useState({ mode: GAME_MODES.rules });\n\n  const initializeGame = () => {\n    const [, setPlayerBoard] = useBoardPlayer;\n    const [, setNpcBoard] = useBoardNpc;\n\n    setPlayerBoard(gameboard(10));\n    setNpcBoard(gameboard(10).addShips(ai.getShips(gameboard(10))));\n    setGameScene({ mode: GAME_MODES.setup });\n  };\n\n  const onGameOver = (winner) => {\n    setGameScene({ mode: GAME_MODES.gameOver, winner });\n  };\n\n  const renderInstructions = () => (\n    <Instructions onContinue={() => setGameScene({ mode: GAME_MODES.setup })} />\n  );\n\n  const renderSetup = () => (\n    <GameSetup\n      useBoard={useBoardPlayer}\n      onAllShipsPlaced={() => setGameScene({ mode: GAME_MODES.main })}\n    />\n  );\n\n  const renderMainGame = () => (\n    <MainGame\n      useBoardPlayer={useBoardPlayer}\n      useBoardNpc={useBoardNpc}\n      onGameOver={onGameOver}\n    />\n  );\n\n  const renderGameOver = () => (\n    <>\n      {gameScene.winner === \"Player\" ? (\n        <h2>Congratulations, {gameScene.winner}! You won!</h2>\n      ) : (\n        <h2>Too bad! {gameScene.winner} beat you!</h2>\n      )}\n      <button onClick={() => initializeGame()}>Play again?</button>\n    </>\n  );\n\n  const selectRenderMode = (mode) => {\n    switch (mode) {\n      case GAME_MODES.rules:\n        return renderInstructions();\n      case GAME_MODES.main:\n        return renderMainGame();\n      case GAME_MODES.setup:\n        return renderSetup();\n      case GAME_MODES.gameOver:\n        return renderGameOver();\n      default:\n        throw new Error(`Unhandled game mode: ${mode}!`);\n    }\n  };\n\n  return (\n    <div\n      className=\"App\"\n      style={{\n        padding: \"2rem\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      }}\n    >\n      <h1>REACT-BATTLESHIP</h1>\n      {selectRenderMode(gameScene.mode)}\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./stylesheets/index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}