{"version":3,"sources":["logic/gameboard.js","styled-components/styled-grid-content.js","styled-components/styled-hit.js","styled-components/styled-miss.js","components/BoardHitsMisses.js","styled-components/styled-gameboard.js","vec2.js","components/Gameboard.js","components/AttackableBoard.js","logic/ship.js","logic/playerAi.js","components/RenderShip.js","components/RenderShips.js","components/MainGame.js","components/RenderShipPreview.js","components/GameSetup.js","components/App.js","index.js"],"names":["gameboardCaller","length","gameboard","size","ships","misses","isOutOfBounds","pos","x","y","posContainsShip","some","ship","getBoardSpaceCoords","v","equals","isMissPos","miss","isHitPos","hits","hitPos","getHits","reduce","acc","isValidShipPos","every","isValidMovePos","addShip","Error","map","coord","addShips","newShips","newBoard","receiveHit","hitShip","find","position","hitSegment","findIndex","newShip","hit","newMisses","isEveryShipSunk","isSunk","StyledGridContent","styled","div","StyledHit","StyledMiss","BoardHitsMisses","getKey","StyledBoard","vec2","isVec2","Object","freeze","add","multiply","cardinalDirections","up","right","down","left","indexedDirections","direction","indexed","increment","dir","incrementQuantity","iDir","Gameboard","onCellClick","onCellMouseEnter","children","rows","i","j","push","onClick","onMouseEnter","style","gridColumn","gridRow","className","split","renderBoard","AttackableBoard","gb","setGb","setGameboard","onAttack","prevBoard","origin","rotation","localHits","Array","fill","getBoardSpaceCoord","segmentIndex","boardSpaceCoords","newHits","includes","getValidPos","board","Math","floor","random","getValidShip","shipLength","possibleShip","console","log","getShips","startingBoard","shipLengths","RenderShip","customStyle","background","border","xStart","max","yStart","getSpan","min","xSpan","ySpan","getGridPosition","pointerEvents","userSelect","RenderShips","MainGame","useBoardPlayer","useBoardNpc","onGameOver","playerBoard","setPlayerBoard","npcBoard","setNpcBoard","useState","turn","setTurn","useEffect","prev","RenderShipPreview","isValidPos","opacity","backgroundColor","GameSetup","useBoard","onAllShipsPlaced","shipIndex","setShipIndex","currentShip","setCurrentShip","setBoard","setShipPos","_ship","incrementShipRotation","onWheel","e","deltaY","prevShip","mostCurrentShip","prevIndex","GAME_MODES","App","ai","mode","gameScene","setGameScene","winner","renderGameOver","initializeGame","padding","display","flexDirection","alignItems","justifyContent","selectRenderMode","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.574bdefd.chunk.js","sourcesContent":["// I want to make the full constructor private\nexport default function gameboardCaller(length) {\n  return gameboard(length);\n}\n\nfunction gameboard(size, ships = [], misses = []) {\n  const isOutOfBounds = (pos) =>\n    pos.x < 0 || pos.x > size - 1 || pos.y < 0 || pos.y > size - 1;\n\n  const posContainsShip = (pos) =>\n    ships.some((ship) => ship.getBoardSpaceCoords().some((v) => v.equals(pos)));\n\n  const isMissPos = (pos) => misses.some((miss) => miss.equals(pos));\n\n  const isHitPos = (pos) =>\n    ships.some((ship) => ship.hits.some((hitPos) => hitPos.equals(pos)));\n\n  const getHits = () => ships.reduce((acc, ship) => [...acc, ...ship.hits], []);\n\n  const isValidShipPos = (ship) =>\n    ship\n      .getBoardSpaceCoords()\n      .every((pos) => !isOutOfBounds(pos) && !posContainsShip(pos));\n\n  const isValidMovePos = (pos) => {\n    return !isOutOfBounds(pos) && !isMissPos(pos) && !isHitPos(pos);\n  };\n\n  const addShip = (ship) => {\n    if (!isValidShipPos(ship)) {\n      throw new Error(\n        `Tried to add ship at illegal board position ${ship\n          .getBoardSpaceCoords()\n          .map((coord) => `(${coord.x},${coord.y})`)}`\n      );\n    }\n\n    return gameboard(size, [...ships, ship], misses);\n  };\n\n  const addShips = (newShips) => {\n    return newShips.reduce(\n      (newBoard, ship) => newBoard.addShip(ship),\n      gameboard(size, ships, misses)\n    );\n  };\n\n  const receiveHit = (hitPos) => {\n    if (isOutOfBounds(hitPos)) {\n      throw new Error(\n        `Tried to receive hit at illegal position (${hitPos.x}, ${hitPos.y})`\n      );\n    }\n\n    // try to find a ship at that position\n    const hitShip = ships.find((ship) =>\n      ship.getBoardSpaceCoords().some((position) => position.equals(hitPos))\n    );\n\n    if (hitShip) {\n      // Find which segment of the ship was hit by matching board-space coords\n      // TODO: this should probably be handled by ship...\n      const hitSegment = hitShip\n        .getBoardSpaceCoords()\n        .findIndex((pos) => pos.equals(hitPos));\n\n      // remove hitship from ships and replace with newship\n      const newShip = hitShip.hit(hitSegment);\n      const newShips = ships.map((ship) => (ship === hitShip ? newShip : ship));\n\n      return gameboard(size, newShips, misses);\n    } else {\n      const newMisses = [...misses, hitPos];\n      return gameboard(size, ships, newMisses);\n    }\n  };\n\n  const isEveryShipSunk = () => ships.every((ship) => ship.isSunk());\n\n  return {\n    size,\n    ships,\n    addShip,\n    addShips,\n    receiveHit,\n    isEveryShipSunk,\n    isValidShipPos,\n    isValidMovePos,\n    isMissPos,\n    isHitPos,\n    misses,\n    get hits() {\n      return getHits();\n    },\n  };\n}\n","import styled from \"styled-components\";\n\nconst StyledGridContent = styled.div`\n  grid-column: ${({ pos }) => pos.x + 1};\n  grid-row: ${({ pos }) => pos.y + 1};\n`;\n\nexport default StyledGridContent;\n","import styled from \"styled-components\";\nimport StyledGridContent from \"./styled-grid-content\";\n\nconst StyledHit = styled(StyledGridContent)`\n  background-color: green;\n  border-radius: 50%;\n  opacity: 50%;\n`;\n\nexport default StyledHit;\n","import styled from \"styled-components\";\nimport StyledGridContent from \"./styled-grid-content\";\n\nconst StyledMiss = styled(StyledGridContent)`\n  background-color: red;\n  border-radius: 50%;\n  opacity: 50%;\n`;\n\nexport default StyledMiss;\n","import StyledHit from \"../styled-components/styled-hit\";\nimport StyledMiss from \"../styled-components/styled-miss\";\n\nexport default function BoardHitsMisses({ hits, misses }) {\n  const getKey = (pos) => `(${pos.x}, ${pos.y})`;\n  return (\n    <>\n      {hits.map((hit) => (\n        <StyledHit pos={hit} key={getKey(hit)} />\n      ))}\n      {misses.map((miss) => (\n        <StyledMiss pos={miss} key={getKey(miss)} />\n      ))}\n    </>\n  );\n}\n","import styled from \"styled-components\";\n\nconst StyledBoard = styled.div`\n  /* TODO: query screen width to set cell size */\n  --container-size: 20rem;\n  --cell-size: ${({ size }) => `calc(var(--container-size)/${size})`};\n\n  /* box-sizing: border-box; */\n  display: grid;\n  grid-template-columns: repeat(${({ size }) => size}, var(--cell-size));\n  grid-template-rows: repeat(${({ size }) => size}, var(--cell-size));\n\n  max-width: var(--container-size);\n\n  border: 1px solid black;\n\n  > .grid-bg {\n    border: 1px solid black;\n    text-align: center;\n    cursor: pointer;\n  }\n`;\n\nexport default StyledBoard;\n","// I need to double-freeze, or else you could still assign dir.up[0]\nconst vec2 = (x, y) => {\n  const equals = (v) => v.x === x && v.y === y;\n\n  const isVec2 = (v) => v.x != null && v.y != null;\n\n  const add = (v) => (isVec2(v) ? vec2(x + v.x, y + v.y) : vec2(x + v, y + v));\n\n  const multiply = (v) =>\n    isVec2(v) ? vec2(x * v.x, y * v.y) : vec2(x * v, y * v);\n\n  return Object.freeze({\n    x,\n    y,\n    equals,\n    add,\n    multiply,\n  });\n};\n\nconst cardinalDirections = Object.freeze({\n  up: vec2(0, -1),\n  right: vec2(1, 0),\n  down: vec2(0, 1),\n  left: vec2(-1, 0),\n});\n\nconst indexedDirections = [\n  cardinalDirections.up,\n  cardinalDirections.right,\n  cardinalDirections.down,\n  cardinalDirections.left,\n];\n\nexport const direction = Object.freeze({\n  ...cardinalDirections,\n  indexed: indexedDirections,\n  increment: (dir, incrementQuantity) =>\n    indexedDirections[\n      (indexedDirections.findIndex((iDir) => iDir.equals(dir)) +\n        incrementQuantity) %\n        indexedDirections.length\n    ],\n});\n\nexport default vec2;\n","import React from \"react\";\nimport StyledBoard from \"../styled-components/styled-gameboard\";\nimport vec2 from \"../vec2\";\n\nexport default function Gameboard({\n  onCellClick = () => {},\n  onCellMouseEnter = () => {},\n  gameboard,\n  children,\n}) {\n  const renderBoard = () => {\n    const rows = [];\n    for (let i = 0; i < gameboard.size; i++) {\n      for (let j = 0; j < gameboard.size; j++) {\n        const pos = vec2(j, i);\n\n        rows.push(\n          <div\n            key={j + i * gameboard.size}\n            onClick={() => onCellClick(pos)}\n            onMouseEnter={() => onCellMouseEnter(pos)}\n            style={{ gridColumn: pos.x + 1, gridRow: pos.y + 1 }}\n            className=\"grid-bg\"\n          >\n            {\"ABCDEFJHIJKLMNOP\".split(\"\")[j]}\n            {i + 1}\n          </div>\n        );\n      }\n    }\n    return rows;\n  };\n\n  return (\n    <StyledBoard size={gameboard.size}>\n      {renderBoard()}\n      {children}\n    </StyledBoard>\n  );\n}\n","import React from \"react\";\nimport BoardHitsMisses from \"./BoardHitsMisses\";\nimport Gameboard from \"./Gameboard\";\n\nexport default function AttackableBoard({\n  gameboard: gb,\n  setGameboard: setGb,\n  onAttack,\n}) {\n  const handleAttack = (pos) => {\n    if (!gb.isValidMovePos(pos)) {\n      return;\n    }\n\n    setGb((prevBoard) => prevBoard.receiveHit(pos));\n    onAttack();\n  };\n\n  return (\n    <div>\n      <Gameboard gameboard={gb} onCellClick={handleAttack}>\n        <BoardHitsMisses misses={gb.misses} hits={gb.hits} />\n      </Gameboard>\n    </div>\n  );\n}\n","export default function ship(\n  length,\n  origin,\n  rotation,\n  localHits = Array(length).fill(false)\n) {\n  const getHits = () =>\n    localHits.reduce(\n      (acc, hit, i) => (hit ? [...acc, getBoardSpaceCoord(i)] : acc),\n      []\n    );\n\n  const getBoardSpaceCoord = (segmentIndex) =>\n    rotation.multiply(segmentIndex).add(origin);\n\n  const getBoardSpaceCoords = () => {\n    const boardSpaceCoords = [];\n    for (let i = 0; i < length; i++) {\n      boardSpaceCoords.push(getBoardSpaceCoord(i));\n    }\n    return boardSpaceCoords;\n  };\n\n  const hit = (hitPos) => {\n    if (hitPos > length - 1 || hitPos < 0) {\n      throw new Error(`Tried to hit a ship at illegal position ${hitPos}`);\n    }\n    const newHits = [...localHits];\n    newHits[hitPos] = true;\n    return ship(length, origin, rotation, newHits);\n  };\n\n  const isSunk = () => !localHits.includes(false);\n\n  return {\n    length,\n    origin,\n    rotation,\n    hit,\n    isSunk,\n    getBoardSpaceCoords,\n    get hits() {\n      return getHits();\n    },\n  };\n}\n","import vec2, { direction as dir } from \"../vec2\";\nimport ship from \"./ship\";\n\n// get a random legal position\nconst getValidPos = (board) => {\n  let pos;\n  do {\n    pos = vec2(\n      Math.floor(Math.random() * board.size),\n      Math.floor(Math.random() * board.size)\n    );\n  } while (!board.isValidMovePos(pos));\n\n  return pos;\n};\n\nconst getSmartPos = (board) => {\n  // not sure how smart to make this...\n  // should know if a hit sunk a ship,\n  // but should have to infer the bounds of the ship based on sinking hit &\n  // surrounding positions\n};\n\nconst getValidShip = (board, shipLength) => {\n  if (board.size < shipLength) {\n    throw new Error(\n      `Cannot get valid ship of length ${shipLength} from board of length ${board.size}`\n    );\n  }\n\n  let possibleShip;\n  let i = 0;\n  const MAX_ITERATIONS = 999;\n  // TODO: shouldn't reattempt failed positions\n  do {\n    possibleShip = ship(\n      shipLength,\n      getValidPos(board),\n      dir.indexed[Math.floor(Math.random() * dir.indexed.length)]\n    );\n    i++;\n  } while (!board.isValidShipPos(possibleShip) && i < MAX_ITERATIONS);\n\n  if (i >= MAX_ITERATIONS) {\n    console.log(\n      \"Could not find valid position to place ship! There are likely not enough free positions on the board\"\n    );\n    return;\n  }\n\n  return possibleShip;\n};\n\nconst getShips = (startingBoard) => {\n  let board = startingBoard;\n  const shipLengths = [5, 4, 3, 3, 2];\n  const ships = [];\n  for (let i = 0; i < shipLengths.length; i++) {\n    const newShip = getValidShip(board, shipLengths[i]);\n    ships.push(newShip);\n    board = board.addShip(newShip);\n  }\n\n  return ships;\n};\n\nexport { getValidPos, getSmartPos, getValidShip, getShips };\n","import React from \"react\";\n\n// render a ship as a child of the Gameboard component\n// looks at ship length to determine graphic (?)\n// looks at ship pos & rotation to determine how to render\n// uses css grid grid-column & grid-row to set position on screen\nexport default function RenderShip({\n  ship,\n  customStyle = { background: \"grey\", border: \"1px solid black\" },\n}) {\n  // for now, there are no graphics\n  // default bg is grey\n  const getGridPosition = () => {\n    const xStart =\n      ship.rotation.x >= 0\n        ? ship.origin.x + 1\n        : Math.max(1, ship.origin.x - ship.length + 2);\n    const yStart =\n      ship.rotation.y >= 0\n        ? ship.origin.y + 1\n        : Math.max(1, ship.origin.y - ship.length + 2);\n\n    // I'm so, so sorry for what I'm about to do\n    // prettier-ignore\n    const getSpan = (rotation, origin) =>\n      rotation === 0\n        ? 1 // if 0, span 1\n        : rotation > 0\n          ? ship.length // else, if > 0, span = length\n          : Math.min(origin + 1, ship.length); // BUT if < 0, min is origin\n\n    const xSpan = getSpan(ship.rotation.x, ship.origin.x);\n    const ySpan = getSpan(ship.rotation.y, ship.origin.y);\n\n    return {\n      gridColumn: `${xStart} / span ${xSpan}`,\n      gridRow: `${yStart} / span ${ySpan}`,\n    };\n  };\n\n  const sunkStyle = () => (ship.isSunk() ? { background: \"red\" } : {});\n\n  return (\n    <>\n      <div\n        style={{\n          ...customStyle,\n          ...sunkStyle(),\n          ...getGridPosition(),\n          pointerEvents: \"none\",\n        }}\n      ></div>\n      <div\n        style={{\n          gridColumn: ship.origin.x + 1,\n          gridRow: ship.origin.y + 1,\n          pointerEvents: \"none\",\n          userSelect: \"none\",\n        }}\n      >\n        X\n      </div>\n    </>\n  );\n}\n","import RenderShip from \"./RenderShip\";\n\nexport default function RenderShips({ ships }) {\n  return (\n    <>\n      {ships.map((ship) => (\n        <RenderShip ship={ship} key={`(${ship.origin.x}, ${ship.origin.y})`} />\n      ))}\n    </>\n  );\n}\n","import { useState, useEffect } from \"react\";\nimport EnemyBoard from \"./AttackableBoard\";\nimport Gameboard from \"./Gameboard\";\nimport { getValidPos } from \"../logic/playerAi\";\nimport BoardHitsMisses from \"./BoardHitsMisses\";\nimport RenderShips from \"./RenderShips\";\n\nfunction MainGame({ useBoardPlayer, useBoardNpc, onGameOver }) {\n  const [playerBoard, setPlayerBoard] = useBoardPlayer;\n  const [npcBoard, setNpcBoard] = useBoardNpc;\n  const [turn, setTurn] = useState(0);\n\n  // I can't check isEveryShipSunk until testBoard is updated\n  // and I'm not sure yet how to properly handle that in my incrementTurn cb\n  useEffect(() => {\n    if (npcBoard.isEveryShipSunk()) {\n      onGameOver(\"Player\");\n    } else if (playerBoard.isEveryShipSunk()) {\n      onGameOver(\"NPC\");\n    }\n  }, [playerBoard, npcBoard, onGameOver]);\n\n  const npcTurn = () => {\n    setPlayerBoard((prev) => prev.receiveHit(getValidPos(prev)));\n  };\n\n  const incrementTurn = () => {\n    npcTurn();\n    setTurn((prev) => prev + 1);\n  };\n\n  return (\n    <div>\n      <div>Turn: {turn}</div>\n      <h2>NPC board</h2>\n      <EnemyBoard\n        gameboard={npcBoard}\n        setGameboard={setNpcBoard}\n        onAttack={incrementTurn}\n      />\n      <h2>Player board</h2>\n      <Gameboard gameboard={playerBoard}>\n        <BoardHitsMisses hits={playerBoard.hits} misses={playerBoard.misses} />\n        <RenderShips ships={playerBoard.ships} />\n      </Gameboard>\n    </div>\n  );\n}\n\nexport default MainGame;\n","import RenderShip from \"./RenderShip\";\n\nexport default function RenderShipPreview({ ship, isValidPos }) {\n  return (\n    <RenderShip\n      ship={ship}\n      customStyle={{\n        opacity: \"50%\",\n        backgroundColor: isValidPos ? \"green\" : \"red\",\n      }}\n    />\n  );\n}\n","import { useState } from \"react\";\nimport ship from \"../logic/ship\";\nimport Gameboard from \"./Gameboard\";\nimport RenderShips from \"./RenderShips\";\nimport RenderShipPreview from \"./RenderShipPreview\";\nimport vec2, { direction } from \"../vec2\";\n\nexport default function GameSetup({ useBoard, onAllShipsPlaced }) {\n  const shipLengths = [5, 4, 3, 3, 2];\n  const [shipIndex, setShipIndex] = useState(0);\n  const [currentShip, setCurrentShip] = useState(\n    ship(shipLengths[shipIndex], vec2(-10, -10), direction.right)\n  );\n\n  const [board, setBoard] = useBoard;\n\n  const setShipPos = (_ship, pos) => ship(_ship.length, pos, _ship.rotation);\n\n  const incrementShipRotation = (_ship, incrementQuantity = 1) =>\n    ship(\n      _ship.length,\n      _ship.origin,\n      direction.increment(_ship.rotation, incrementQuantity)\n    );\n\n  const isValidPos = (_ship) => useBoard[0].isValidShipPos(_ship);\n\n  const setCurrentShipPos = (pos) => {\n    setCurrentShip((prevShip) => setShipPos(prevShip, pos));\n  };\n\n  const placeShip = (pos) => {\n    const mostCurrentShip = setShipPos(currentShip, pos);\n\n    if (!isValidPos(mostCurrentShip)) {\n      console.log(\"Oops! Can't place ship there!\");\n      return;\n    }\n\n    setBoard((prevBoard) => prevBoard.addShip(mostCurrentShip));\n\n    if (shipIndex < shipLengths.length - 1) {\n      // Set the next \"preview\" ship to:\n      // next length in array, current pos, & rotation of previous ship\n      setCurrentShip(\n        ship(shipLengths[shipIndex + 1], pos, mostCurrentShip.rotation)\n      );\n      setShipIndex((prevIndex) => prevIndex + 1);\n    } else {\n      onAllShipsPlaced();\n    }\n  };\n\n  return (\n    <div>\n      <h2>Place your ships!</h2>\n      <div\n        onWheel={(e) =>\n          e.deltaY > 0\n            ? setCurrentShip((prevShip) => incrementShipRotation(prevShip))\n            : setCurrentShip((prevShip) => incrementShipRotation(prevShip, 3))\n        }\n      >\n        <Gameboard\n          gameboard={board}\n          onCellMouseEnter={setCurrentShipPos}\n          onCellClick={placeShip}\n        >\n          <RenderShipPreview\n            ship={currentShip}\n            isValidPos={isValidPos(currentShip)}\n          />\n          <RenderShips ships={board.ships} />\n        </Gameboard>\n      </div>\n      <button\n        onClick={() =>\n          setCurrentShip((prevShip) => incrementShipRotation(prevShip))\n        }\n      >\n        Rotate\n      </button>\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport gameboard from \"../logic/gameboard\";\nimport MainGame from \"./MainGame\";\nimport * as ai from \"../logic/playerAi\";\nimport GameSetup from \"./GameSetup\";\n\nconst GAME_MODES = {\n  rules: \"rules\",\n  setup: \"setup\",\n  main: \"main\",\n  gameOver: \"game over\",\n};\n\nexport default function App() {\n  const useBoardPlayer = useState(() => gameboard(10));\n\n  const useBoardNpc = useState(() =>\n    gameboard(10).addShips(ai.getShips(gameboard(10)))\n  );\n\n  const [gameScene, setGameScene] = useState({ mode: GAME_MODES.setup });\n\n  const initializeGame = () => {\n    const [, setPlayerBoard] = useBoardPlayer;\n    const [, setNpcBoard] = useBoardNpc;\n\n    setPlayerBoard(gameboard(10));\n    setNpcBoard(gameboard(10).addShips(ai.getShips(gameboard(10))));\n    setGameScene({ mode: GAME_MODES.setup });\n  };\n\n  const onGameOver = (winner) => {\n    setGameScene({ mode: GAME_MODES.gameOver, winner });\n  };\n\n  const renderSetup = () => (\n    <GameSetup\n      useBoard={useBoardPlayer}\n      onAllShipsPlaced={() => setGameScene({ mode: GAME_MODES.main })}\n    />\n  );\n\n  const renderMainGame = () => (\n    <MainGame\n      useBoardPlayer={useBoardPlayer}\n      useBoardNpc={useBoardNpc}\n      onGameOver={onGameOver}\n    />\n  );\n\n  const renderGameOver = () => (\n    <>\n      <h2>Congratulations, {gameScene.winner}! You won!</h2>\n      <button onClick={() => initializeGame()}>Play again?</button>\n    </>\n  );\n\n  const selectRenderMode = (mode) => {\n    switch (mode) {\n      case GAME_MODES.main:\n        return renderMainGame();\n      case GAME_MODES.setup:\n        return renderSetup();\n      case GAME_MODES.gameOver:\n        return renderGameOver();\n      default:\n        throw new Error(`Unhandled game mode: ${mode}!`);\n    }\n  };\n\n  return (\n    <div\n      className=\"App\"\n      style={{\n        padding: \"2rem\",\n        display: \"flex\",\n        flexDirection: \"column\",\n        alignItems: \"center\",\n        justifyContent: \"center\",\n      }}\n    >\n      <h1>REACT-BATTLESHIP</h1>\n      {selectRenderMode(gameScene.mode)}\n    </div>\n  );\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./stylesheets/index.css\";\nimport App from \"./components/App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}